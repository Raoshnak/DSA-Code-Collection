1. Next Smaller Elements

def nextSmallerElement(arr,n):
	stack = []
	ans = [-1] * n
	stack.append(-1)
	for i in range(n-1, -1, -1):
		curr = arr[i]
		while (stack[-1] >= curr):
			stack.pop()
		ans[i] = stack[-1]
		stack.append(curr)
	return ans
	

2. Previous Smaller Elements

def prevSmaller(self, A):
		n = len(A)
		stack = []
		ans = [-1] * n
		stack.append(-1)
		for i in range(n):
			curr = A[i]
			while (stack[-1] >= curr):
				stack.pop()
			ans[i] = stack[-1]
			stack.append(curr)
		return ans


3. Largest Rectangle in a Histogram

def nextsmallerelements(self, A):
        n = len(A)
        stack = []
        ans = [-1] * n
        stack.append(-1)
        for i in range(n - 1, -1, -1):
            curr = A[i]
            while(stack[-1] != -1 and A[stack[-1]] >= curr):
                stack.pop()
            ans[i] = stack[-1]
            stack.append(i)
        return ans
    def prevsmallerelements(self, A):
        n = len(A)
        stack = []
        ans = [-1] * n
        stack.append(-1)
        for i in range(n):
            curr = A[i]
            while(stack[-1] != -1 and A[stack[-1]] >= curr):
                stack.pop()
            ans[i] = stack[-1]
            stack.append(i)
        return ans
    
	def largestRectangleArea(self, A):
        n = len(A)
        next = [] * n 
        next = self.nextsmallerelements(A)
        prev = [] * n 
        prev = self.prevsmallerelements(A)
        area = -999999
        for i in range(n):
            l = A[i]
            if (next[i] == -1):
                next[i] = n 
            b = next[i] - prev[i] - 1
            newArea = l * b
            area = max(area, newArea)
        return area

4. Sliding Window Maximum

from collections import deque
def slidingMaximum(self, arr, k):
        n = len(arr)
        Q = deque()
        ans = [] * n
        for i in range(k):
            while (Q and arr[i] >= arr[Q[-1]]):
                Q.pop()
            Q.append(i)
    #For rest of the elements arr[k] to arr[n]
        for i in range(k, n):
            ans.append(arr[Q[0]])
        #Remove elements which are out of the window
            while (Q and Q[0] <= i - k):
            #Remove the element from the front of the queue
                Q.popleft()
        #Remove the elements smaller than the currently added elements
            while (Q and arr[i] >= arr[Q[-1]]):
                Q.pop()
            Q.append(i)
        ans.append(arr[Q[0]])
        return ans
            

class MinStack:
    stack = []
    minimums = []
    # @param x, an integer
    # @return an integer
    def push(self, x):
        if len(self.stack) == 0:
            self.stack.append(x)
            self.minimums.append(x)
        else:
            self.stack.append(x)
            if x < self.minimums[-1]:
                self.minimums.append(x)
            else:
                self.minimums.append(self.minimums[-1])

    # @return nothing
    def pop(self):
        if len(self.stack) != 0:
            self.stack.pop()
            self.minimums.pop()

    # @return an integer
    def top(self):
        if len(self.stack) == 0:
            return -1
        else:
            return self.stack[-1]

    # @return an integer
    def getMin(self):
        if len(self.stack) == 0:
            return -1
        else:
            return self.minimums[-1]
    
    def __init__(self):
        self.stack = []
        self.minimums = []
  

